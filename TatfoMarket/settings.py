"""
Django settings for TatfoMarket project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config #new
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECRET_KEY = 'django-insecure-^p&fn33z_8)+3zz%4v!yy3$d2^n&l5a&(sozq*k^7y+6=3&1tf'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True

SECRET_KEY = config('SECRET_KEY', default='S#perS3crEt_1122')

# # SECURITY WARNING: don't run with debug turned on in production!

# DEBUG = config('DEBUG', default=False, cast=bool)


# # load production server from .env
# ALLOWED_HOSTS = ['localhost', '127.0.0.1', config('SERVER', default='127.0.0.1')]

ALLOWED_HOSTS = []

# ALLOWED_HOSTS = [
#     'localhost',
#     '.herokuapp.com'
# ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', #new
    'rest_framework',  # new
    'corsheaders',  # new 
    # 'rest_framework_swagger',
    'allauth',
    'allauth.account',
    # 'social_django',
    # 'social_core',
    'captcha',
    'accountss',
    'Ecommerce.apps.EcommerceConfig',
    # 'djstripe', 
    'crispy_forms',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    # 'debug_toolbar', #new
    # 'cookie_law', #new
    # 'django_cookie_law', #new
    'axes', #new
    'api',
    'oauth2_provider',
    'drf_spectacular', #new
    'rest_framework_simplejwt', #new
    # 'django_search', #new
    # 'django_datatable',

]




MIDDLEWARE = [
    # 'social_django.middleware.SocialAuthExceptionMiddleware', #new
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', #new
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'allauth.account.middleware.AccountMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware', #new
    # 'cookie_law.middleware.CookieLawMiddleware', #new
    # 'django_cookie_law.middleware.CookieLawMiddleware', #new
    'axes.middleware.AxesMiddleware',
    'corsheaders.middleware.CorsMiddleware',
   
]

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

ROOT_URLCONF = 'TatfoMarket.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'social_django.context_processors.backends', #new
                # 'social_django.context_processors.login_redirect', #new
                # 'cart.context_processors.cart', #new
                'Ecommerce.context_processors.totalitem', #new
                # 'Ecommerce.context_processors.carts', #new
                # 'django.core.context_processors.i18n', #new
               

            ],
        },
    },
]

WSGI_APPLICATION = 'TatfoMarket.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'
# LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_L10N = True #new


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join (BASE_DIR, 'static/'),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_URL = 'accountss:login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = 'accountss:welcome'
# ACCOUNT_LOGOUT_REDIRECT_URL = 'accountss:welcome'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' #new

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_HOST = 'smtp.mailgun.org'
# EMAIL_HOST = 'smtp.mailtrap.io'
# EMAIL_PORT = 2525
# EMAIL_USE_TLS = True
# EMAIL_PORT = 587
# EMAIL_HOST_USER = "Tchatchouaviny@yahoo.fr"
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')


MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_PRIVATE_KEY')


# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
#         # For each OAuth based provider, either add a ``SocialApp``
#         # (``socialaccount`` app) containing the required client
#         # credentials, or list them here:
        
         'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },

        
        'APPS': {
            'client_id': '123',
            'secret': '456',
            'key': ''
        }
    },


    'github': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        
         'SCOPE': [
            'user',
            'repo',
            'read:org',
        ],
      


    },

    'facebook': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:

        'METHOD' : 'oauth2',
        
         'SCOPE': [
            'email',
            'public_profile'
        ],

        # 'AUTH_PARAMS': {
        #     'auth_type': 'reauthentificate',
        # },

        # 'EXCHANGE_TOKEN': True,
        # 'VERIFIED_EMAIL': False,


    }
}

# ACCOUNT_LOGIN_ON_GET=True

# ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_SESSION_REMEMBER = True
SOCIALACCOUNT_QUERY_EMAIL = True

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    # 'social_core.backends.github.GithubOAuth2', #new
    # 'social_core.backends.google.GoogleOAuth2', #new
    # 'social_core.backends.google.GoogleOAuth', #new cccc
    # 'social_core.backends.facebook.FacebookOAuth2', #new

    'django.contrib.auth.backends.ModelBackend', #new
    'allauth.account.auth_backends.AuthenticationBackend',
    'axes.backends.AxesStandaloneBackend',
    ]

ACCOUNT_EMAIL_REQUIRED = True #new

# http://127.0.0.1:8000/google/login/callback
# http://127.0.0.1:8000/google/

# SOCIAL_AUTH_REQUIRE_POST = True

# SOCIAL_AUTH_URL_NAMESPACE = 'social'


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

SOCIAL_AUTH_GITHUB_KEY = config('SOCIAL_AUTH_GITHUB_KEY')
SOCIAL_AUTH_GITHUB_SECRET = config('SOCIAL_AUTH_GITHUB_SECRET')

SOCIAL_AUTH_FACEBOOK_KEY = config('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = config('SOCIAL_AUTH_FACEBOOK_SECRET')

STRIPE_PUBLIC_KEY = config('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY') 


NOTCHPAY_SECRET_KEY = config('NOTCHPAY_SECRET_KEY')


LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# AUTH_USER_MODEL = 'accountss.User'


BACKEND_DOMAIN="http://127.0.0.1:8080"
PAYMENT_SUCCESS_URL="http://127.0.0.1:8080/success/"
PAYMENT_CANCEL_URL="http://127.0.0.1:8080/cancel/"


# gettext_bin = '/usr/bin/msgfmt'


REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated",],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication", #new
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PARSER_CLASSES": ["rest_framework.parsers.JSONParser",],
    # "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema", #new
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema", #new
}

OAUTH2_PROVIDER = {
    'SCOPES' : {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'},
}


# DEBUG_TOOLBAR_PANELS = [
#     'debug_toolbar.panels.versions.VersionsPanel',
#     'debug_toolbar.panels.timer.TimerPanel',
#     'debug_toolbar.panels.settings.SettingsPanel',
#     'debug_toolbar.panels.headers.HeadersPanel',
#     'debug_toolbar.panels.request.RequestPanel',
#     'debug_toolbar.panels.sql.SQLPanel',
#     'debug_toolbar.panels.staticfiles.StaticFilesPanel',
#     'debug_toolbar.panels.templates.TemplatesPanel',
#     'debug_toolbar.panels.cache.CachePanel',
#     'debug_toolbar.panels.signals.SignalsPanel',
#     'debug_toolbar.panels.logging.LoggingPanel',
#     'debug_toolbar.panels.redirects.RedirectsPanel',
# ]

INTERNAL_IPS = [
    '127.0.0.1',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
]

# COOKIE_LAW = {
#     'banner_text': 'Ce site utilise des cookies pour amélioler l\'expérience utilisateur.',
#     'button_text': 'Accepter',
#     'cookie_name': 'my_cookie',
#     'cookie_lifetime': '365', 
#     'cookie_secure': 'False',
# }

# COOKIES_POLICY_URL = "/cookies/"
# COOKIES_POLICY_TEMPLATE = "cookie_law/cookies_policy.html"

AXES_FAILURE_LIMIT = 3 # nombre maximun de tentatives échouéés avant le blocage
AXES_LOCK_OUT_AT_FAILURE = True #activer le blocage après tentatives échouées
AXES_COOLOFF_TIME = timedelta(minutes=1) #Durée du blocage


SESSION_EXPIRE_AT_BROWSER_CLOSE = True

SESSION_COOKIE_AGE = 1800

# SWAGGER_SETTINGS = {
#     'USE_SESSION_AUTH': False,
#     'SECURITY_DEFINITIONS': {
#        'api_key': {
#         'type': 'apikey',
#         'in': 'header',
#         'name': 'Authorization',
#        }
#     }, 
#     'JSON_EDITOR': True,
#     'api_version': '0.1',
#     'enable_methods': [
#         'get', 'post', 'put', 'patch', 'delete'
#     ],
#     'api_path': '/',
# }  #new


# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# AWS_ACCESS_KEY_ID = 'votre access key'
# AWS_SECRET_ACCESS_KEY = 'votre '
# AWS_STORAGE_BUCKET_NAME = 'nom de votre bucket'


